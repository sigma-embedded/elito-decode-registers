#! /usr/bin/python3

import os
import io
import glob
import fileinput
import functools

import generator
import generator_cfill
import generator_cdef
import generator_stream
import generator_cbga

def run(opt_defines=[], opt_directory=None, opt_c_fill=None,
        opt_c_defines=None, opt_datastream=None, opt_datastream_c=None,
        opt_endianess='little', opt_only=None, opt_exclude=None,
        opt_bga=None):
    import block
    import unit

    unit_files = []

    if not opt_bga:
        bga = None
    else:
        import bga

        bga = bga.Top()
        bga.iterate_files([opt_bga,], opt_defines)
        bga.read_pins(opt_directory, opt_defines)
        bga.merge()

    top  = unit.Top(bga)
    for u in glob.glob(os.path.join(opt_directory, "*.unit")):
        base = os.path.basename(u)[:-5]

        if opt_exclude and (base in opt_exclude):
            continue

        if (not opt_only) or (base in opt_only):
            unit_files.append(u)

    top.iterate_files(unit_files, opt_defines)

    units = block.Mergeable.create_container(top.get_units(),
                                             lambda x: x.get_id())

    for u in units.values():
        u.read_registers(opt_directory, opt_defines)

    for u in units.values():
        u.merge(units)

    units = list(filter(lambda x: x.is_enabled(), units.values()))
    units.sort(key = functools.cmp_to_key(lambda a, b: a.cmp_by_addr(a, b)))

    generators = []

    if opt_c_defines:
        f = generator_cdef.CodeFactory()
        generators.append([opt_c_defines, generator.CodeGenerator(f)])

    if opt_c_fill:
        f = generator_cfill.CodeFactory()
        generators.append([opt_c_fill, generator.CodeGenerator(f)])

    if opt_datastream:
        f = generator_stream.CodeFactory(
            { 'little' : generator_stream.LITTLE_ENDIAN,
              'big'    : generator_stream.BIG_ENDIAN }[opt_endianess],
            False)

        if isinstance(opt_datastream, io.TextIOBase):
            # when '-' is used, argparse will return sys.stdout;
            # convert it into a raw stream in this case
            s = open(opt_datastream.fileno(), "wb", closefd = False)
        else:
            s = opt_datastream

        generators.append([s, generator.CodeGenerator(f)])

    if opt_datastream_c:
        f = generator_stream.CodeFactory(
            { 'little' : generator_stream.LITTLE_ENDIAN,
              'big'    : generator_stream.BIG_ENDIAN }[opt_endianess],
            True)

        if isinstance(opt_datastream, io.TextIOBase):
            # when '-' is used, argparse will return sys.stdout;
            # convert it into a raw stream in this case
            s = open(opt_datastream.fileno(), "wb", closefd = False)
        else:
            s = opt_datastream_c

        generators.append([s, generator.CodeGenerator(f)])

    if bga:
        f = generator_cbga.CodeFactory()
        g = generator.CodeGenerator(f)
        bga.generate_code(g)

        import sys
        sys.stdout.write(g.emit())

    for g in generators:
        g[1].add_size_t(len(units), "number of units")

    for u in units:
        for g in generators:
            u.generate_code(g[1])

    for g in generators:
        res = g[1].emit()
        f   = g[0]

        if res:
            g[0].write(res)

if __name__ == '__main__':
    import argparse


    parser = argparse.ArgumentParser()

    parser.add_argument('--define', '-D', metavar='<symbol>',
                        action='append', help='define a symbol',
                        dest='opt_defines', default = [])
    parser.add_argument('--c-fill', metavar='<file>',
                        type = argparse.FileType('w'),
                        help='output C code',
                        dest='opt_c_fill', default = None)
    parser.add_argument('--c-defines', metavar='<file>',
                        type = argparse.FileType('w'),
                        help='output C symbols',
                        dest='opt_c_defines', default = None)
    parser.add_argument('--datastream', metavar='<file>',
                        type = argparse.FileType('bw', encoding = None),
                        help='output raw datastream',
                        dest='opt_datastream', default = None)
    parser.add_argument('--datastream-c', metavar='<file>',
                        type = argparse.FileType('bw', encoding = None),
                        help='output raw datastream as C source',
                        dest='opt_datastream_c', default = None)
    parser.add_argument('--endian', metavar='big|little',
                        help='endianess of raw datastream',
                        choices = ['little', 'big'],
                        dest='opt_endianess', default = 'little')
    parser.add_argument('--unit-only',  metavar='<unit>',
                        action='append', help='include only listed unit files',
                        dest='opt_only', default = None)
    parser.add_argument('--unit-exclude', metavar='<unit>',
                        action='append', help='exclude listed unit files',
                        dest='opt_exclude', default = None)
    parser.add_argument('--bga', metavar='<bga>',
                        help='BGA to be used when generating pin definitions',
                        dest='opt_bga', default = None)
    parser.add_argument('opt_directory')

    args = parser.parse_args()
    run(**(args.__dict__))
